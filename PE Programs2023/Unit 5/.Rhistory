iris
iris1=iris
iris1
iris1$Species=NULL
iris1
d = dist(iris1, method = "euclidean")
hfit = hclust(d, method = "average")
plot(hfit)
grps = cutree(hfit,k=4)
grps
rect.hclust(hfit,k=4, border = "red")
#install.packages("arules")
library(arules)
getwd()
groceries <- read.transactions("groceries.csv", sep = ",")
#it results in a sparse matrix suitable for transactional data.
summary(groceries)
#details about no of transactions, no of items, density of non zero,
inspect(groceries[1:5])
#provide the detail of first 5 transactions
itemFrequency(groceries[, 1:3])
#allows us to see the proportion of transactions that contain the
#item and to view the support level for
#the first three items in the grocery data
itemFrequencyPlot(groceries, support = 0.1)
#plot the bar chart using atleat 10% of support
itemFrequencyPlot(groceries, topN = 20)
teens <- read.csv("snsdata.csv")
getwd()
teens <- read.csv("snsdata.csv")
str(teens)
View(teens)
table(teens$gender)
table(teens$gender, useNA = "ifany")
summary(teens$age) #for numeric data
teens$age <- ifelse(teens$age >= 13 & teens$age < 20,
teens$age, NA)
summary(teens$age) #more missing data
#fill the missing data for gender
teens$female <- ifelse(teens$gender == "F" &
!is.na(teens$gender), 1, 0)
#if gender is female assign 1 otherwise 0
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
#if gender is NA, it will assign 1 to no_gender variable
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
#compare original gender column with newly created female
#column to check the replacement.no missing data now
table(teens$no_gender, useNA = "ifany")
#fill the missing data for age
mean(teens$age)
#mean for missing data is undefined
mean(teens$age, na.rm = TRUE)
#remove missing data once to find mean for average age for graduation year
aggregate(data = teens, age ~ gradyear, mean, na.rm = TRUE)
#used to find average age for every year
#after removing all the NA values
ave_age <- ave(teens$age, teens$gradyear, FUN =
function(x) mean(x, na.rm = TRUE))
#use ave function to calculate the mean of all the subgroups available
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
#use ave on the NA values
summary(teens$age) #no missing values now
#training data
#install.packages("stats") #implementation of Kmeans
library(stats)
interests <- teens[5:40]
#consider numeric values
interests_z <- as.data.frame(lapply(interests, scale))
#scale to rescale features to get mean of 0 and std deviation of 1
set.seed(2345)
teen_clusters <- kmeans(interests_z, 5)#take five clusters
#model performance
teen_clusters$size
#show the cluster size of 5 clusters. so many teenagers
#have same interest so to verify find the centroid
teen_clusters$centers
#improve performance
teens$cluster <- teen_clusters$cluster
View(teens)
teens[1:5, c("cluster", "gender", "age", "friends")]
aggregate(data = teens, age ~ cluster, mean)
aggregate(data = teens, female ~ cluster, mean)
aggregate(data = teens, friends ~ cluster, mean)
# Loading package
library(ClusterR)
library(cluster)
# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]
# Loading package
library(ClusterR)
library(cluster)
# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]
# Fitting K-Means clustering Model
# to training dataset
set.seed(240) # Setting seed
kmeans.re <- kmeans(iris_1, centers = 3, nstart = 20)
#nstart means initial random number of centroids
#centers means no of clusters
kmeans.re
# Cluster identification for
# each observation
kmeans.re$cluster
# Confusion Matrix
cm <- table(iris$Species, kmeans.re$cluster)
cm
# Model Evaluation and visualization
#plot(iris_1[c("Sepal.Length", "Sepal.Width")])
#plot(iris_1[c("Sepal.Length", "Sepal.Width")],col = kmeans.re$cluster)
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
col = kmeans.re$cluster,
main = "K-means with 3 clusters")
## Plotiing cluster centers
kmeans.re$centers
kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")]
# cex is font size, pch is symbol
points(kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")],
col = 1:3, pch = 8, cex = 3)
## Visualizing clusters
y_kmeans <- kmeans.re$cluster
clusplot(iris_1[, c("Sepal.Length", "Sepal.Width")],
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste("Cluster iris"),
xlab = 'Sepal.Length',
ylab = 'Sepal.Width')
iris
iris1=iris
iris1
iris1$Species=NULL
iris1
d = dist(iris1, method = "euclidean")
hfit = hclust(d, method = "average")
plot(hfit)
grps = cutree(hfit,k=4)
grps
rect.hclust(hfit,k=4, border = "red")
iris
iris1=iris
iris1
iris1$Species=NULL
iris1
d = dist(iris1, method = "euclidean")
hfit = hclust(d, method = "average")
plot(hfit)
grps = cutree(hfit,k=4)
grps
rect.hclust(hfit,k=4, border = "red")
# Loading package
library(ClusterR)
library(cluster)
# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]
# Fitting K-Means clustering Model
# to training dataset
set.seed(240) # Setting seed
kmeans.re <- kmeans(iris_1, centers = 3, nstart = 20)
#nstart means initial random number of centroids
#centers means no of clusters
kmeans.re
# Cluster identification for
# each observation
kmeans.re$cluster
# Confusion Matrix
cm <- table(iris$Species, kmeans.re$cluster)
cm
# Model Evaluation and visualization
#plot(iris_1[c("Sepal.Length", "Sepal.Width")])
#plot(iris_1[c("Sepal.Length", "Sepal.Width")],col = kmeans.re$cluster)
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
col = kmeans.re$cluster,
main = "K-means with 3 clusters")
## Plotiing cluster centers
kmeans.re$centers
kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")]
# cex is font size, pch is symbol
points(kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")],
col = 1:3, pch = 8, cex = 3)
## Visualizing clusters
y_kmeans <- kmeans.re$cluster
clusplot(iris_1[, c("Sepal.Length", "Sepal.Width")],
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste("Cluster iris"),
xlab = 'Sepal.Length',
ylab = 'Sepal.Width')
sum(is.na(iris))
library("ggplot2")
ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=Species)) +geom_point()
?kmeans
result<-kmeans(iris[,3:4],centers = 3,nstart = 25)
print(result)
result$cluster
head(result$cluster, 4)
result$size
result$centers
data("iris")
str(iris)
iris.new<- iris[,c(1,2,3,4)]
iris.class<- iris[,"Species"]
head(iris.new)
head(iris.class)
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
iris.new$Sepal.Length<- normalize(iris.new$Sepal.Length)
iris.new$Sepal.Width<- normalize(iris.new$Sepal.Width)
iris.new$Petal.Length<- normalize(iris.new$Petal.Length)
iris.new$Petal.Width<- normalize(iris.new$Petal.Width)
head(iris.new)
result<- kmeans(iris.new,3)
result$size
table(result$cluster,iris.class)
#install.packages("animation")
library("animation")
par(mfrow=c(3,3))
kmeans.ani(iris[,3:4],3)
km print(km)
km$tot.withinss
#install.packages("factoextra")
library("factoextra")
#install.packages("NbClust")
library("NbClust")
fviz_nbclust(iris[,3:4],kmeans,method = "wss") + geom_vline(xintercept = 3,linetype=5) + labs(subtitle="Elbow method")
data("iris")
data("iris")
View(airquality)
head(iris)
summary(iris)
#NAs
colSums(is.na(iris))
df = iris %>% select(1:4) %>% scale() %>% data.frame()
library(dplyr)
df = iris %>% select(1:4) %>% scale() %>% data.frame()
head(df)
result = kmeans(df, 3, nstart = 25)
print(result)
aggregate(df, by = list(cluster = result$cluster),mean)
#df = cbind(df, iris$Species)
newdata = cbind(df, cluster=result$cluster)
head(newdata)
result$cluster
head(result$cluster,4)
result$size
result$centers
#visulization
library("ggplot2")
library(factoextra)
ggplot(data = newdata, aes(x=result$cluster)) + geom_bar(fill = "steelblue")
#Cluster
fviz_cluster(result, data = newdata)
table(result$cluster,iris.class)
#install.packages("factoextra")
library("factoextra")
#install.packages("NbClust")
library("NbClust")
fviz_nbclust(iris[,3:4],kmeans,method = "wss") + geom_vline(xintercept = 3,linetype=5) + labs(subtitle="Elbow method")
sum(is.na(iris))
library("ggplot2")
ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=Species)) +geom_point()
?kmeans
result<-kmeans(iris[,3:4],centers = 3,nstart = 25)
print(result)
result$cluster
head(result$cluster, 4)
result$size
result$centers
data("iris")
str(iris)
iris.new<- iris[,c(1,2,3,4)]
iris.class<- iris[,"Species"]
head(iris.new)
head(iris.class)
normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
iris.new$Sepal.Length<- normalize(iris.new$Sepal.Length)
iris.new$Sepal.Width<- normalize(iris.new$Sepal.Width)
iris.new$Petal.Length<- normalize(iris.new$Petal.Length)
iris.new$Petal.Width<- normalize(iris.new$Petal.Width)
head(iris.new)
result<- kmeans(iris.new,3)
result$size
table(result$cluster,iris.class)
fviz_nbclust(iris[,3:4],kmeans,method = "wss") +
geom_vline(xintercept = 3,linetype=5) + labs(subtitle="Elbow method")
