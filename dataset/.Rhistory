plot(model)
plot(model)
predict(model,test)
a<- predict(model,test)
a
table(a,test$strength)
a <- confusionMatrix(a,test$strength)
library(caret)
a <- confusionMatrix(a,test$strength)
test$strength
a
cor(a,test$strength)
sd(test$strength)
sd(a)
df = read.csv("Datasets/Concrete_Data.csv")
View(df)
sum(is.na(df))
set.seed(1234)
split <- sample.split(df$strength,SplitRatio = 0.75)
train <- subset(df,split==T)
test <- subset(df,split==F)
library(neuralnet)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
View(df)
df = read.csv("Datasets/Concrete_Data.csv")
View(df)
df <- scale(df)
set.seed(1234)
split <- sample.split(df$strength,SplitRatio = 0.75)
df <- scale(df[1:8])
df <- scale(df[,1:8])
df = read.csv("Datasets/Concrete_Data.csv")
View(df)
sum(is.na(df))
df <- scale(df[,1:8])
set.seed(1234)
split <- sample.split(df$strength,SplitRatio = 0.75)
df = read.csv("Datasets/Concrete_Data.csv")
sum(is.na(df))
df1 <- scale(df[,1:8])
set.seed(1234)
split <- sample.split(df$strength,SplitRatio = 0.75)
train <- subset(df,split==T)
test <- subset(df,split==F)
library(neuralnet)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
train <- subset(df1,split==T)
test <- subset(df1,split==F)
library(neuralnet)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
model <- neuralnet(df$strength~., data = train,hidden=5 )
attach(df)
model <- neuralnet(strength~., data = train,hidden=5 )
df = read.csv("Datasets/Concrete_Data.csv")
sum(is.na(df))
df1 <- scale(df)
set.seed(1234)
split <- sample.split(df$strength,SplitRatio = 0.75)
train <- subset(df1,split==T)
test <- subset(df1,split==F)
library(neuralnet)
attach(df)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
#attach(df)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
#attach(df)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
library(caret)
confusionMatrix(a,test)
confusionMatrix(a,as.data.frame(test))
class(a)
class(test)
test <- subset(df1,split==F)
test
confusionMatrix(a,as.data.frame(test$strength))
cf <- table(a,train$strength)
m<- compute(a,test[1:8])
d<- read.csv('Datasets/LUNGCAP.csv')
View(d)
str(d)
summary(d)
sum(is.na(d))
#null values remove
d$LungCap[is.na(d$LungCap)] <- mean(d$LungCap, na.rm = T)
summary(d)
d$Age[is.na(d$Age)] <- mean(d$Age, na.rm = T)
d$Height[is.na(d$Height)] <- mean(d$Height, na.rm = T)
summary(d)
sum(is.na(d))
d$LungCap<- scale(d$LungCap)
d$Age<- scale(d$Age)
d$Height<- scale(d$Height)
model<- lm(LungCap~Age)
abline(model,col="red",lwd=3)
plot(Age, LungCap)
d<- read.csv('Datasets/LUNGCAP.csv')
str(d)
summary(d)
sum(is.na(d))
lapply(d, str)
lapply(d, summary)
#null values remove
d$LungCap[is.na(d$LungCap)] <- mean(d$LungCap, na.rm = T)
d$Age[is.na(d$Age)] <- mean(d$Age, na.rm = T)
d$Height[is.na(d$Height)] <- mean(d$Height, na.rm = T)
d$LungCap<- scale(d$LungCap)
d$Age<- scale(d$Age)
d$Height<- scale(d$Height)
plot(Age, LungCap)
model<- lm(LungCap~Age)
library(arules)
data<- read.transactions("groceries.csv",sep = ",")
inspect(data)
apriori(data)
groceryrules <- apriori(groceries, parameter =
list(support =
0.006, confidence = 0.25,
minlen = 2))
df <- apriori(data,parameter = list(support=0.006,confidence=0.2,minlen=3))
df
df <- apriori(data,parameter = list(support=0.006,confidence=0.2,minlen=2))
df
df <- apriori(data,parameter = list(support=0.006,confidence=0.2,minlen=3))
df
write(df,file = "dfrules2.csv",sep=",",quote=TRUE,row.names=FALSE)
df <- read.csv("Datasets/wisc_bc_data.csv")
sum(is.na(df))
summary(df)
str(df)
table(df$diagnosis)
df<-df[-1]
df$diagnosis <- factor(df$diagnosis)
summary(df)
str(df)
norm<- scale(df[-1])
str(df)
View(norm)
train1 <- norm[1:469,]
test1 <- norm[470:569,]
trainlabel <- df[1:469,1]
trainlable
testlable <-df[470:569,1]
trainlabel
clf <- knn(train=train1,test=test1,cl=trainlabel,k=25)
a1<-table(testl,clf)
a1
a1<-table(testlable,clf)
a1
trainlabel
View(trainlabel)
a1<-table(testlable,clf)
a1
a <- (sum(diag(a1)))/(sum(a1))
a
df <- iris
View(df)
split <- sample.split(df$Species,SplitRatio = 0.7)
library(e1071)
clf1 <- naiveBayes(Species~., trainiris)
pred <- predict(clf1,testiris)
table(pred,testiris[,5])
library(caret)
a<-confusionMatrix(pred,testiris[,5])
a
ds <- readingSkills
View(ds)
str(ds)
sum(is.na(ds))
summary(ds)
str(ds)
sum(is.na(ds))
summary(ds)
ds$nativeSpeaker=factor(ds$nativeSpeaker)
set.seed(2000)
library(caTools)
split <- sample.split(ds$nativeSpeaker,SplitRatio = 0.75)
train1<- subset(ds,split==T)
test1 <- subset(ds,split==F)
library(rpart)
library(rpart.plot)
View(ds)
dstree <- ctree(nativeSpeaker~., data = train1)
tes
a<-predict(dstree, test)
clf <- rpart(nativeSpeaker~., train1,method = "class")
rpart.plot(clf)
b<-predict(clf,test1)
table(test$nativeSpeaker,a)
df = read.csv("Datasets/Concrete_Data.csv")
sum(is.na(df))
df1 <- scale(df)
set.seed(1234)
split <- sample.split(df$strength,SplitRatio = 0.75)
train <- subset(df1,split==T)
test <- subset(df1,split==F)
library(neuralnet)
#attach(df)
model <- neuralnet(strength~., data = train,hidden=5 )
plot(model)
a<- predict(model,test)
a
m<- compute(a,test[1:8])
library(party)
ds <- readingSkills
View(ds)
d<- read.csv('Datasets/LUNGCAP.csv')
View(d)
str(d)
summary(d)
sum(is.na(d))
lapply(d, str)
lapply(d, summary)
#null values remove
d$LungCap[is.na(d$LungCap)] <- mean(d$LungCap, na.rm = T)
d$Age[is.na(d$Age)] <- mean(d$Age, na.rm = T)
d$Height[is.na(d$Height)] <- mean(d$Height, na.rm = T)
d$LungCap<- scale(d$LungCap)
d$Age<- scale(d$Age)
d$Height<- scale(d$Height)
plot(Age, LungCap)
#null values remove
d$LungCap[is.na(d$LungCap)] <- mean(d$LungCap, na.rm = T)
d$Age[is.na(d$Age)] <- mean(d$Age, na.rm = T)
d$Height[is.na(d$Height)] <- mean(d$Height, na.rm = T)
Ln<- scale(d$LungCap)
An<- scale(d$Age)
Hn<- scale(d$Height)
View(d)
d<- read.csv('Datasets/LUNGCAP.csv')
str(d)
summary(d)
sum(is.na(d))
lapply(d, str)
#null values remove
d$LungCap[is.na(d$LungCap)] <- mean(d$LungCap, na.rm = T)
d$Age[is.na(d$Age)] <- mean(d$Age, na.rm = T)
d$Height[is.na(d$Height)] <- mean(d$Height, na.rm = T)
Ln<- scale(d$LungCap)
An<- scale(d$Age)
Hn<- scale(d$Height)
View(d)
attach(d)
plot(Age, LungCap)
model<- lm(LungCap~Age)
abline(model,col="red",lwd=3)
model<- lm(LungCap~An+Hn)
abline(model,col="red",lwd=3)
model<- lm(LungCap~d$An+d$Hn)
model<- lm(LungCap~+Age)
abline(model,col="red",lwd=3)
library(arules)
abline(model,col="red",lwd=3)
pre <- predict(modell,data=d)
plot(Age, LungCap)
model<- lm(LungCap~+Age)
pre <- predict(modell,data=d)
pre <- predict(model,data=d)
pre
cm <- table(d,model)
cm <- table(pre,d)
cm <- table(pre,model)
cm <- table(pre,data=d)
cm <- table(pre,newdata=d)
pre <- predict(model,newdata=d)
cm <- table(pre,newdata=d)
cm <- table(pre,d$LungCap)
accuracy(cm)
cm
Ln<- scale(d$LungCap)
An<- scale(d$Age)
Hn<- scale(d$Height)
View(d)
attach(d)
plot(Age, LungCap)
model<- lm(LungCap~+Age)
pre <- predict(model,newdata=d)
abline(model,col="red",lwd=3)
pre <- predict(model,d)
pre
dataset = read.csv('data2.csv')
data("airquality")
View(airquality)
aq <- airquality
summary(aq)
str(aq)
#Handling NA's
aq$Ozone[is.na(aq$Ozone)]<-mean(aq$Ozone, na.rm = T)
aq$Solar.R[is.na(aq$Solar.R)]<-mean(aq$Solar.R,na.rm = T)
#Normalization
nor <- function(x){(x-min(x)) / (max(x)-min(x)) }
aq_norm <- as.data.frame(lapply(aq[c(1,2,3,4)], nor))
aq[c(1,2,3,4)] <- aq_norm
??attach
attach(aq)
#model
MULTIREG <- lm(Ozone~.,data = aq_norm)
summary(MULTIREG)
attributes(MULTIREG)
#test data
checkozone = data.frame(Solar.R = 150, Wind = 9, Temp =80)
#Predict
result = predict(MULTIREG, checkozone)
result
##Visualization of model
plot(Ozone ~ MULTIREG$fit)
plot(MULTIREG$fit + MULTIREG$res ~ MULTIREG$fit)
abline(0,1,col=5, lwd=3) #0 is the intercept and 1 is the slope.
?abline
#fit - Fitted Values, also known as predicted Values, are the value that a
#fit - Fitted Values, also known as predicted Values, are the value that a
#regression predicts for the dependent Variable(or response Variable) based on the
#res - Residuals,  also known as errors, are the difference between the
#res - Residuals,  also known as errors, are the difference between the
#observed values of the dependant variables and the corresponding predicted
# Select position_salaries dataset
dataset <- read.csv(file.choose(),sep = ',',header = T)
dataset = dataset[2:3]
dataset
#Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
plot(dataset$Level, dataset$Salary, main = "plot")
abline(lin_reg)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
dataset$Level
dataset$Level2
dataset$Level3
dataset$Level4
g<-ggplot(dataset,)+
geom_point(aes(x=Level,y=Salary),colour='blue')+
geom_line(aes(x=Level,y=Salary),colour='red')
g
g<-ggplot(dataset,)+
geom_point(aes(x=Level,y=Salary),colour='blue')+
geom_line(aes(x=Level,y=Salary),colour='red')
library(ggplot2)
g<-ggplot(dataset,)+
geom_point(aes(x=Level,y=Salary),colour='blue')+
geom_line(aes(x=Level,y=Salary),colour='red')
g
#Predicting a new result with linear Regression
predict(lin_reg, data.frame(Level = 6.5))
#Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4=6.5^4))
# Select position_salaries dataset
dataset <- read.csv(file.choose(),sep = ',',header = T)
View(dataset)
dataset = dataset[2:3]
dataset
#Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
plot(dataset$Level, dataset$Salary, main = "plot")
abline(lin_reg)
abline(lin_reg,col="red")
abline(lin_reg)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
dataset$Level
dataset$Level2
dataset$Level3
dataset$Level4
library(ggplot2)
g<-ggplot(dataset,)+
geom_point(aes(x=Level,y=Salary),colour='blue')+
geom_line(aes(x=Level,y=Salary),colour='red')
g
#Predicting a new result with linear Regression
predict(lin_reg, data.frame(Level = 6.5))
#Predicting a new result with linear Regression
predict(lin_reg, data.frame(Level = 6.5))
#Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4=6.5^4))
plot(dataset$Level, dataset$Salary, main = "plot")
abline(lin_reg)
data <- iris
head(iris)
library(ClusterR)
str(data)
data <- data[,-5]
sum(is.na(data))
set.seed(123)
??kmeans
kModel <- kmeans(data,centers = 3,nstart = 20)
kModel
kModel$cluster
cm<- table(iris$Species,kModel$cluster)
cm
sum(diag(cm))/(sum(cm))
accuracy(cm)
plot(data[1:2],
col = kModel$cluster,
main = "K-means with 3 clusters")
clusplot(data[1:2],
kModel$cluster,xlab = "Sepal.Length",ylab = "Sepal.Width",
main = "KMeans",
shade = TRUE,
color = TRUE,
labels = 3)
clusplot(data[1:2],
kModel$cluster,xlab = "Sepal.Length",ylab = "Sepal.Width",
main = "KMeans",
shade = TRUE,
color = TRUE,
labels = 3)
library(ClusterR)
str(data)
data <- data[,-5]
sum(is.na(data))
set.seed(123)
??kmeans
kModel <- kmeans(data,centers = 3,nstart = 20)
kModel
kModel$cluster
cm<- table(iris$Species,kModel$cluster)
cm
sum(diag(cm))/(sum(cm))
accuracy(cm)
plot(data[1:2],
col = kModel$cluster,
main = "K-means with 3 clusters")
clusplot(data[1:2],
kModel$cluster,xlab = "Sepal.Length",ylab = "Sepal.Width",
main = "KMeans",
shade = TRUE,
color = TRUE,
labels = 3)
library(ClusterR)
clusplot(data[1:2],
kModel$cluster,xlab = "Sepal.Length",ylab = "Sepal.Width",
main = "KMeans",
shade = TRUE,
color = TRUE,
labels = 3)
d<- read.csv('Datasets/LUNGCAP.csv')
View(d)
#View(d)
str(d)
summary(d)
sum(is.na(d))
lapply(d, str)
lapply(d, summary)
#null values remove
d$LungCap[is.na(d$LungCap)] <- mean(d$LungCap, na.rm = T)
d$Age[is.na(d$Age)] <- mean(d$Age, na.rm = T)
d$Height[is.na(d$Height)] <- mean(d$Height, na.rm = T)
Ln<- scale(d$LungCap)
An<- scale(d$Age)
Hn<- scale(d$Height)
View(d)
attach(d)
plot(Age, LungCap)
model<- lm(LungCap~+Age)
abline(model,col="red",lwd=3)
pre <- predict(model,d)
cm <- table(pre,d$LungCap)
cm
# Select position_salaries dataset
dataset <- read.csv(file.choose(),sep = ',',header = T)
View(dataset)
dataset = dataset[2:3]
dataset
#Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
plot(dataset$Level, dataset$Salary, main = "plot")
abline(lin_reg)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset
iris
iris1 = iris
iris1$Species = NULL
iris1
d = dist(iris1,method = "euclidean")
?hclust
hfit = hclust(d,method = "average")
plot(hfit)
grps = cutree(hfit, k=4)
grps
rect.hclust(hfit, k=4,border='red')
getwd()
setwd("E:/Study/LPU/B.TECH/4th Year/7th Semester/INT234 - PREDICTIVE ANALYTICS/PREDICTIVE-ANALYTICS/dataset/airport.csv")
setwd("E:/Study/LPU/B.TECH/4th Year/7th Semester/INT234 - PREDICTIVE ANALYTICS/PREDICTIVE-ANALYTICS/dataset")
df <- read.csv("airport.csv")
